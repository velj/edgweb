# Create your views here.
from django.http import HttpResponseRedirect, HttpResponse
from django.core.urlresolvers import reverse
from polls.models import Choice, Poll, Players, CourseMaster, Rounds, Scores
from django.template import RequestContext, loader, Context
from django.http import Http404
from django.shortcuts import get_object_or_404, render, render_to_response
from django.views import generic
from django.template.loader import get_template
from django.contrib.auth import logout
from django.contrib.auth.models import User
from polls.forms import *

def index(request):
    template = get_template('polls/index.html')
    variables = Context({
    	'head_tite': 'edgWEB',
	'page_title':'Welcome to eDG WEB',
	'page_body': 'Where you can store and view DG scores',
	'user': request.user
    })
    output= template.render(variables)
    return HttpResponse(output)

def logout_page(request):
    logout(request)
    return HttpResponseRedirect('../')

def user_page(request, username):
    try:
	user= User.objects.get(username=username)
    except:
	raise Http404('Requested user not found')
    
    template = get_template('polls/user_page.html')
    variables = Context({
	'username':username,
    })
    output= template.render(variables)
    return HttpResponse(output)

def register_page(request):
    if request.method == 'POST':
	form = RegistrationForm(request.POST)
	if form.is_valid():
		user=User.objects.create_user(
			username=form.cleaned_data['username'],
			password=form.cleaned_data['password1'],
			email=form.cleaned_data['email']
		)
		return HttpResponseRedirect('../')
    else:
	form =RegistrationForm()
    variables = RequestContext(request, {
	'form': form
    })
    return render_to_response('registration/register.html' ,variables)


#def index(request):
    #latest_poll_list = Poll.objects.order_by('-pub_date')[:5]
    #context = {'latest_poll_list': latest_poll_list}
    #return render(request, 'polls/index.html', context)
    
    ## output = ', '.join([p.question for p in latest_poll_list])
    ## return HttpResponse(output)
    ##template = loader.get_template('polls/index.html')
    ##context = RequestContext(request, {
    ##    'latest_poll_list': latest_poll_list,
    ##})
    ##return HttpResponse(template.render(context))


class IndexView(generic.ListView):
    template_name = 'polls/index.html'
    context_object_name = 'latest_poll_list'

    def get_queryset(self):
        """Return the last five published polls."""
        return Poll.objects.order_by('-pub_date')[:5]


class DetailView(generic.DetailView):
    model = Poll
    template_name = 'polls/detail.html'


class ResultsView(generic.DetailView):
    model = Poll
    template_name = 'polls/results.html'

def vote(request, poll_id):
    p = get_object_or_404(Poll, pk=poll_id)
    try:
        selected_choice = p.choice_set.get(pk=request.POST['choice'])
    except (KeyError, Choice.DoesNotExist):
        # Redisplay the poll voting form.
        return render(request, 'polls/detail.html', {
            'poll': p,
            'error_message': "You didn't select a choice.",
        })
    else:
        selected_choice.votes += 1
        selected_choice.save()
        # Always return an HttpResponseRedirect after successfully dealing
        # with POST data. This prevents data from being posted twice if a
        # user hits the Back button.
        return HttpResponseRedirect(reverse('polls:results', args=(p.id,)))




		




